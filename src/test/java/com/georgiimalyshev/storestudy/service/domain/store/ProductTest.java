package com.georgiimalyshev.storestudy.service.domain.store;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class ProductTest {
	private static Product product1;
	private static Product product2;
	private static Product product3;
	private static Product product4;
	private static Product product5;

	@BeforeAll
	public static void globalSetUp() {
		System.out.println("initializing product objects for the test");
		product1 = new Product("name1", 10);
		product2 = new Product("name1", 10);
		product3 = new Product("name3", 10);
		product4 = new Product("name1", 40);
		product5 = new Product("name5", 50);
	}

	@Test
	public void whenEqualsEqualObjectsThenReturnTrue() {
		assertThat((product1.equals(product2)), is(true));
	}

	// TODO consider the implications of Product instances being entities that can
	// be in different states (transient, managed etc.), can have or not have an ID
	// generated by persistent storage etc.

	@Test
	public void whenEqualsNonEqualNamesEqualPricesThenReturnFalse() {
		assertThat((product1.equals(product3)), is(false));
	}

	@Test
	public void whenEqualsEqualNamesNonEqualPricesThenReturnFalse() {
		assertThat((product1.equals(product4)), is(false));
	}

	@Test
	public void whenEqualsNonEqualNamesAndPricesThenReturnFalse() {
		assertThat((product1.equals(product5)), is(false));
	}
}